<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>about-virtualization.com</title>
    <link>/</link>
    <description>Recent content on about-virtualization.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 17 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Azure Policy - Part 1</title>
      <link>/blog/azurepolicy/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/azurepolicy/</guid>
      <description>Azure Policies All architecture designs are driven by set of rules to meet regulatory and security compliance. Azure policies come into play to enforce these organizational policies and assess them at the Azure subscription and management group layers. For example, your company wants to ensure that all your azure resources reside in one Geography, and users are not allowed to create resources outside the preselected Geography. Azure policies make it possible by enforcing this configuration across Management Group / Subscription/ resource groups.</description>
    </item>
    
    <item>
      <title>Infrastructure as code using Terraform - Part 2</title>
      <link>/blog/terraform02/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/terraform02/</guid>
      <description>Terraform Workspace Terraform Workspace provides you an option to create dedicated runtime stacks for each of your environments. For instance, the requirement is to create a Resource group based on project code for UAT and Prod environments. One of the ways to achieve this is using terraform workspace with a single code.
A Workspace is created using terraform workspace new workspace_name. To list the workspace, you can use the &amp;ldquo;list&amp;rdquo; option.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>/about/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>I am Shashi, I have been an IT Infrastructure engineer since 2008. I have worked predominately on virtualization, as the blog name indicates. I had an opportunity to work on multiple virtualization technologies, including VMware virtualization, Hyper V, Azure Cloud. Under the roof of security I have gained good experience in Symantec endpoint protection and Gemalto/ Thales encryption.
Certifications:
 Microsoft Certified: Azure Solutions Architect Expert Exam AZ-303: Microsoft Azure Architect Technologies Exam 742: Identity with Windows Server 2016 VMware Certified Professional- Data Center Virtualization  Feel free to reach me in LinkedIn.</description>
    </item>
    
    <item>
      <title>Infrastructure as code using Terraform - Part 1</title>
      <link>/blog/terraform/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/terraform/</guid>
      <description>Terraform Introduction Infrastructure as code, popularly known as IaC, adopted by industry through DevOps, the key reason being source code would always generate the same result. Infrastructure as code evolved to solve the problem of environment drift in the release pipelines. Inconsistency among environments leads to issues during deployments. Without IaC, administration and infrastructure maintenance involves manual processes that are hard to track and contributed to errors.
The most popular tools used for Iac are Azure ARM and Terraform.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contact/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
