[{
    "title": "Azure Security - Part 2",
    "date": "",
    "description": "Series of blog posts on Azure Policies and Security Center.",
    "body": "Azure Security Center Azure Security Center is a centralized security management system/dashboard that provides security related information of your Hybrid infrastructure. Azure security works in conjunction with you, the customer, which provides recommendations to you in making your environment secure. It\u0026rsquo;s the customer\u0026rsquo;s responsibility to work on these recommendations and make infrastructure secure. The security center\u0026rsquo;s remarkable feature is the recommendations tab; This view provides an overall security score and recommendations on how to increase the score. Recommendations are provided along with the number of potential security points.\n  Security Center Overview     Security Center Recommendation   Shared responsibility in the cloud In an on-prem infrastructure, you own end-to-end security, i.e., data center access to individual applications/data access. In cloud infra, some of the responsibilities are transferred to cloud service provider.\n  Shared responsibility in the cloud   Azure security Center License Azure security licensing comes in two tiers, free and Defender. The free version is active by default. You need to onboard a subscription to enable the Defender plan. Pricing is based on resource type and consummation.\nDefender tier is enabled by following either of below options\n  Security -\u0026gt; Management -\u0026gt; Pricing \u0026amp; Settings -\u0026gt;Azure defender Plan\n  Security -\u0026gt; Management -\u0026gt; Coverage -\u0026gt;edit plan\n    Security Center License Tier     Defender License by resource   Log analytic workspace needs onboarding to defender tier along with subscriptions.\n  Workspace defender License   Note: when you enable the free trial for 30 days, Defender is auto charged based on consumption post 30 days\nCommunication Once the defender plan is enabled, you need to install the agent to collect the data. Azure security center collects the data using Log Analytics agent on the VM, Log analytic workspace stores the data for further analysis.\nYou can enable the agent\u0026rsquo;s auto-provisioning using – Security Center-\u0026gt; Pricing\u0026amp; Settings -\u0026gt; Your subscription -\u0026gt; Auto Provisioning.\nLog Analytics agent for Azure VMs – collects event logs and related security configurations\nMicrosoft Dependency agent - The Dependency agent collects discovered data about processes running on the machine and external process dependencies. Used for Service Map and VM insights\nPolicy Add-on for Kubernetes – Enables reporting of auditing and compliance details of Kubernetes cluster to Azure Policies.\nYou can enable or disable the auto agent installation for all three extensions or select only those relevant to you.\nYou can use your organization-specific software distribution tool to install the agents. To add a non-azure system, use the below option\n- Security Center -\u0026gt; General -\u0026gt; inventory -\u0026gt; add non azure servers\n- Security Center -\u0026gt;Security Solutions -\u0026gt; non azure servers add\nNote: Charges will be based on per Node per month.\nCloud Security Azure Security Centre cloud security has four components.\n Secure score – here, you can see the overall security score of your subscriptions Regulatory Compliance – Regulatory compliance is the inbuilt standard policies that are applied to Azure subscriptions. You can add additional Microsoft pre-defined regulatory compliance under security policies. Firewall manager - Azure Firewall Manager is a security management service that provides central security policy and route management for cloud-based security perimeters. Azure Defender allows you to configure advanced protections options    VM vulnerability assessment\n  Just in time access\n  Adaptive application access\n  Container image scanning\n  Adaptive network hardening\n  SQL vulnerability assessment\n  File integrity monitoring\n  Network map\n  IoT security\n  VM vulnerability assessment – In the background, the Defender uses Qualys\u0026rsquo;s powered agent, which identifies the system\u0026rsquo;s threat. You don\u0026rsquo;t need any additional Qualys licenses to use this feature. You can even install your own vulnerability solution like Rapid 7. However, license needs to be taken care by customer. Post the agent installation;It would take a minimum of 30 mins to reflect the agent installation status in the security center. Vulnerabilities are assed once in 24 hours; even if you remediate, it takes 24 hours to clear from the dashboard.\nAdaptive application access – Allows admins to white-list the applications to be run on a VM rather than blacklisting. App sense is used in the background to learn the applications and white list the applications\nContainer image scanning (Qualys) – Scans Azure container registry for security vulnerabilities and exposes detailed findings for each image.\nAdaptive network hardening- Analyses the virtual machines' internet traffic communication patterns and determines if the existing rules in the NSGs associated are overly permissive, resulting in an increased potential attack surface. This typically occurs when this IP address doesn\u0026rsquo;t communicate regularly with this resource. Alternatively, the IP address has been flagged as malicious by Security Center\u0026rsquo;s threat intelligence sources.\nSQL vulnerability assessment - Scans database for security vulnerabilities and exposes any deviations from best practices such as misconfigurations, excessive permissions, and unprotected sensitive data.\nFile integrity monitoring - Log Analytics workspace is used to monitor the file integrity. You need to enable this feature on a log analytics work space explicitly. This feature monitors the changes to the registry, operating system files, and application software for any potential attack. The checksum comparison method is used to find the difference from the last scan to the files' current state. It can also write the changes to a storage account so that an admin can compare the old and new files. Storage cost needs to be considered before enabling the feature .\nNetwork Map – Creates network map, showing the topology and workload.\nJust in Time – Popularly known as JIT, this feature works on the back of an NSG. The pre-requisite to enable this feature is NSG. In a nutshell, the JIT adds a deny rule on top of existing NGS rules attached to a VM. Allow rule in NSG is created only when a user requests access. JIT configuration contains the ports, source IP address, and allowed duration. The minimum allowed time is 1 hour, and the default is 03 hours; post this interval the NSG allow rule is removed.\n  Access level required to request JIT access to a VM .\n  Azure JIT - Access level   Management The security center\u0026rsquo;s management section allows you to manage licenses, connect to third party solutions , configure agent auto installation, and automate workflows.\nPricing and settings allow you to\n Change the license tier of your subscription Enable / Disable auto-provisioning of extensions ( agents) Configure Email notifications along with notification types Integrate with other Microsoft security services like cloud security. Automate the workflows based on the type of threat detected; also available directly under the security center\u0026rsquo;s management pane. Continuous export of security center data – recommendations/scores/alerts / regulatory compliance to Event hub or Log analytic workspace Connect to other clouds – AWS / GCP; also available directly under the security center\u0026rsquo;s management pane.  Security Policy allows you to add or modify security policies / regulatory compliances and custom initiatives. By default, standard ASC default policies are applied to your subscription.\nSecurity Solutions allows you to view the connected security solutions (auto-discovered security solutions) and configure data sources. Data sources can be a non-azure machine, SIEM, and Azure App gateway with firewall enabled.\nSIEM – Data is exported to Third party SIEM via – Security Center -\u0026gt; Azure monitor-\u0026gt; azure event hub -\u0026gt;azure functions -\u0026gt;SIEM\nLimitations Email notifications of the security center have the following limitations; you can use workflow automation to get around the limitation.\n· a maximum of one email per 6 hours (4 emails per day) for high-severity alerts\n· a maximum of one email per 12 hours (2 emails per day) for medium-severity alerts\n· a maximum of one email per 24 hours for low-severity alerts\n",
    "ref": "/blog/04securitycenter/"
  },{
    "title": "Azure Security - Part 1",
    "date": "",
    "description": "Series of blog posts on Azure Policies and Security Center.",
    "body": "Azure Policy All architecture designs are driven by set of rules to meet regulatory and security compliances. Azure policies come into play to enforce these organizational policies at Management Group, Subscription and resource groups level. For example, your company wants to ensure that all your azure resources reside in one of the preselected location, and users are not allowed to create resources outside these locations. Azure Policy makes it possible by enforcing location setting across Management Group / Subscription/ resource groups.\nThe life cycle of azure policy   life cycle of azure policy    A policy definition can be stored at the Management Group level or a Subscription. Policy definition location is mandatory before you create a custom policy. When you assign a policy, it will take a minimum of 30 mins to take effect..  Policy Effects A Policy effect can be one of below.\n Append – appends settings to an existing resource. For example, you want to allow access to storage account from an ip address , it can be achieved using append effect . Audit – Writes a warning event in the activity log when evaluating a non-compliant resource. In other words, it is audit if resouce exisits. For example, you want to evaluate if all your azure resources and resource groups are in the exact location , it can be achieved using audit effect . AuditIfNotExists - Enables auditing of resources if condition met, but don’t have the properties specified in the details of the then condition. For example, you want to check if the security center plugin is installed on Azure VMs , it can be achieved using AuditIfNotExists Deny – Prevents resource requests. For example, you want to allow only the predefined SKUs and deny VMS outside predefined SKU\u0026rsquo;s , it can be achieved with deny effect DeployIfNotExists – Deploy if the resource doesn’t exist, this is similar to Audit ifnot exists . Instead of just auditing it will deploy the resources. Disabled - Policy is evaluated, but settings are not applied. Modify - used to add, update, or remove properties of a resource..  Policy evaluation Polices are evaluated in the below order.\n  Policy evaluation   You can assign more than one policy to a Management Group / Subscription / Resource Group. Like Group policies in Active Directory, the policies are inherited from the top unless you exclude them in the assignment.\nBelow is a simple demo for assigning an inbuilt policy to allow only Standard A0 SKU. At the end of the video, you can see that the Virtual machine creation fails if I select anything apart from Standard A0 SKU. Another important observation is that the policy “Audit resource location matches resource group location” is not stopping me from creating a VM in east US2 location as the policy effect is audit only.\n  Exclusions / Exemptions for a policy are applied during the policy creation as well as post-policy evolution.\n  Initiatives Initiatives are nothing but a group of polices definitions. You can define your initiative along with version control.\n  Azure Initiatives   Compliances One of the most significant benefits of azure policies is you can view the overall compliance status of policies and initiatives in one dashboard. Azure Policy compliance dashboard lets you view all the policies and initiatives assigned to Management Group/ subscription/ Resource Group. You can filter the compliance using Scope/policy definition type/compliance state/ custom search.\nYou can perform below actions from compliance dashboard .\n View definition of policy /initiative Delete assignment Edit assignment Duplicate the assignment Create exemption    Azure Compliance   When you delete a resource group, policy assignments are removed too. You can’t check what policies were previously assigned to a deleted resource group. However, the custom definitions will still be available as they are created at the subscription level or Management Group level.\n",
    "ref": "/blog/azurepolicy/"
  },{
    "title": "Infrastructure as code using Terraform - Part 2",
    "date": "",
    "description": "Series of blog posts on Terraform.",
    "body": "Terraform Workspace Terraform Workspace provides you an option to create dedicated runtime stacks for each of your environments. For instance, the requirement is to create a Resource group based on project code for UAT and Prod environments. One of the ways to achieve this is using terraform workspace with a single code.\nA Workspace is created using terraform workspace new workspace_name. To list the workspace, you can use the \u0026ldquo;list\u0026rdquo; option. * indicates the current workspace. To switch to a different workspace, use the “select” option.\nPS C:\\content-management\\blog\u0026gt; terraform workspace new prod Created and switched to workspace \u0026#34;prod\u0026#34;! You\u0026#39;re now on a new, empty workspace. Workspaces isolate their state, so if you run \u0026#34;terraform plan\u0026#34; Terraform will not see any existing state for this configuration. PS C:\\content-management\\blog\u0026gt; terraform workspace list default * prod In this example, I am creating the resource group based on the workspace, i.e., Prod and UAT. I am using the local variable to achieve this. The result would be two resource groups Prod-XYZ and UAT-XYZ . The sample code is enclosed below.\nvariable \u0026#34;ProjectCode\u0026#34; { type = string default = \u0026#34;XYZ\u0026#34; } variable \u0026#34;location\u0026#34; { type = string default = \u0026#34;eastus\u0026#34; } locals { RG = \u0026#34;${terraform.workspace}-${var.ProjectCode}\u0026#34; } Code for actual resource creation based on Workspace .\nresource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;RGname\u0026#34; { name = local.RG location = var.location } Result post running the code in Prod and UAT workspace\nPS D:\\Terraform\\blogLabs\\02-workspace\u0026gt; terraform apply .\\uat.tfplan\razurerm_resource_group.RGname: Creating...\razurerm_resource_group.RGname: Creation complete after 3s [id=/subscriptions/XXXX/resourceGroups/UAT-XYZ]\rApply complete! Resources: 1 added, 0 changed, 0 destroyed.\rThe state of your infrastructure has been saved to the path below. This state is required to modify and destroy your infrastructure, so keep it safe. To inspect the complete state\ruse the `terraform show` command.\rState path: terraform.tfstate\rPS D:\\Terraform\\blogLabs\\02-workspace\u0026gt; PS D:\\Terraform\\blogLabs\\02-workspace\u0026gt; terraform show\r# azurerm_resource_group.RGname:\rresource \u0026quot;azurerm_resource_group\u0026quot; \u0026quot;RGname\u0026quot; {\rid = \u0026quot;/subscriptions/XXXX/resourceGroups/UAT-XYZ\u0026quot;\rlocation = \u0026quot;eastus\u0026quot;\rname = \u0026quot;UAT-XYZ\u0026quot;\rtags = {}\r}\rPS D:\\Terraform\\blogLabs\\02-workspace\u0026gt; Get-AzResourceGroup *XYZ | select ResourceGroupName\rResourceGroupName\r-----------------\rUAT-XYZ\rPROD-XYZ\rWhen you use destroy command within a workspace, all resources created in that stack are deleted. In the below example, I have run the destroy command on the UAT workspace.\nPS D:\\Terraform\\blogLabs\\02-workspace\u0026gt; terraform workspace select UAT Switched to workspace \u0026#34;UAT\u0026#34;. PS D:\\Terraform\\blogLabs\\02-workspace\u0026gt; terraform destroy azurerm_resource_group.RGname: Refreshing state... [id=/subscriptions/XXXX/resourceGroups/UAT-XYZ] An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: - destroy Terraform will perform the following actions: # azurerm_resource_group.RGname will be destroyed - resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;RGname\u0026#34; { - id = \u0026#34;/subscriptions/XXXX/resourceGroups/UAT-XYZ\u0026#34; -\u0026gt; null - location = \u0026#34;eastus\u0026#34; -\u0026gt; null - name = \u0026#34;UAT-XYZ\u0026#34; -\u0026gt; null - tags = {} -\u0026gt; null } Plan: 0 to add, 0 to change, 1 to destroy. Do you really want to destroy all resources in workspace \u0026#34;UAT\u0026#34;? Terraform will destroy all your managed infrastructure, as shown above. There is no undo. Only \u0026#39;yes\u0026#39; will be accepted to confirm. Enter a value: yes azurerm_resource_group.RGname: Destroying... [id=/subscriptions/XXXX/resourceGroups/UAT-XYZ] azurerm_resource_group.RGname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/UAT-XYZ, 10s elapsed] azurerm_resource_group.RGname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/UAT-XYZ, 20s elapsed] azurerm_resource_group.RGname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/UAT-XYZ, 30s elapsed] azurerm_resource_group.RGname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/UAT-XYZ, 40s elapsed] azurerm_resource_group.RGname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/UAT-XYZ, 50s elapsed] azurerm_resource_group.RGname: Destruction complete after 51s Destroy complete! Resources: 1 destroyed. PS D:\\Terraform\\blogLabs\\02-workspace\u0026gt; Get-AzResourceGroup *XYZ | select ResourceGroupName ResourceGroupName ----------------- PROD-XYZ ",
    "ref": "/blog/terraform02/"
  },{
    "title": "About Me",
    "date": "",
    "description": "Sharing is caring !!..",
    "body": "I am Shashi, I have been an IT Infrastructure engineer since 2008. I have worked predominately on virtualization, as the blog name indicates. I had an opportunity to work on multiple virtualization technologies, including VMware virtualization, Hyper V, Azure Cloud. Under the roof of security I have gained good experience in Symantec endpoint protection and Gemalto/ Thales encryption.\nCertifications:\n Microsoft Certified: Azure Solutions Architect Expert Exam AZ-303: Microsoft Azure Architect Technologies Exam 742: Identity with Windows Server 2016 VMware Certified Professional- Data Center Virtualization  Feel free to reach me in LinkedIn.\n",
    "ref": "/about/"
  },{
    "title": "Infrastructure as code using Terraform - Part 1",
    "date": "",
    "description": "Series of blog posts on Terraform.",
    "body": "Terraform Introduction Infrastructure as code, popularly known as IaC, adopted by industry through DevOps, the key reason being source code would always generate the same result. Infrastructure as code evolved to solve the problem of environment drift in the release pipelines. Inconsistency among environments leads to issues during deployments. Without IaC, administration and infrastructure maintenance involves manual processes that are hard to track and contributed to errors.\nThe most popular tools used for Iac are Azure ARM and Terraform. As the name suggests, Azure ARM is intended for Azure Cloud infra; however, Terraform supports multi cloud Infrastructure, VMware, and on-prem Infrastructure. Both the tools have their advantage and disadvantages. In both cases, administrators needs to spend some time to understand the syntax and nuances.\nTerraform is a preferred tool for IaC as most organizations use more than one cloud to host their resources. Some of the advantages of Terraform are\n Ease of understanding Multi-cloud support Code versioning Statefile Workspace to separate different stacks Inbuilt dependency calculation Parallel execution capability One-click or auto deployments and decommissions  A typical Terraform code has the following components\n Variables Data Providers Resources Output  Let us go through a simple example of creating a resource group. What do we need first? Before you start coding, you need a valid Azure account and authorization to create the required resources. You can use either PowerShell, azure cloud shell. You can directly start coding in the local system or using the Azure cloud shell. In this post, I am using the visual studio editor.\nYou can follow the installation instructions at link\nUnder the variable section, define the Resource Group Name and location. {} indicate the actual value of the variables are in the VAR file. The point to remember here is the file name needs to be terraform.tfvars\n############################################################################# # VARIABLES ############################################################################# variable \u0026#34;RGname\u0026#34; {} variable \u0026#34;location\u0026#34; {} Example of Var File\nRGname = \u0026#34;test-group\u0026#34; location = \u0026#34;eastus\u0026#34; Provider is nothing but the plugin the Terraform needs to import before executing the code; in our case, it’s Azure. ~\u0026gt; indicated the azurerm version needs to be greater than 1.0\n############################################################################# # PROVIDERS ############################################################################# #Import Azure provider/plugin  provider “azurerm” { version = “~\u0026gt; 1.0.” } Resources is the section you would create the actual resource . Here we are stating resource group \u0026ldquo;Rname \u0026quot; with the resource type as “azurerm_resource_group,” . Name and the location are the two mandatory properties to create a resource group. Name is populated using the value of declared variable RGname, which is of type string with allowed special characters. Lets say your company has a mandatory rule to have all the resource names in lower case , this is where you use inbuilt terraform functions . The code would look like – “name = lower(var.RGname)”\n############################################################################# # RESOURCES ############################################################################# resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;Rname\u0026#34; { name = var.RGname location = var.location tags = { \u0026#34;BusinessUnit\u0026#34; = \u0026#34;Test\u0026#34; } } Output : this is where you display the resource group name and location\n############################################################################# # OUTPUTS ############################################################################# output \u0026#34;ResourceGroupname\u0026#34; { value = azurerm_resource_group.Rname.name } output \u0026#34;ResourceGrouplocation\u0026#34; { value = azurerm_resource_group.Rname.location } How to run your first azure terraform code\n Create a folder “Terraform.” Navigate to the newly created folder “blab” Save the code as main.tf Save your variable file as terraform.tfvar  First step to execute your code is - Run terraform init , which will load the plugins defined under providers section of the code\nPS D:\\Terraform\\blab\u0026gt; terraform init Initializing the backend... Initializing provider plugins... - Using previously-installed hashicorp/azurerm v1.44.0 Terraform has been successfully initialized! You may now begin working with Terraform. Try running \u0026#34;terraform plan\u0026#34; to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. PS D:\\Terraform\\blab\u0026gt; The next step is to run Terraform plan, which will draw out an execution plan. Terraform performs a refresh, and then determines what actions are necessary to achieve the desired state specified in the configuration files. This step will not modify or create any resources.\nPS D:\\Terraform\\blab\u0026gt; terraform plan -out .\\plan.tfplan Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_resource_group.Rname will be created + resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;Rname\u0026#34; { + id = (known after apply) + location = \u0026#34;eastus\u0026#34; + name = \u0026#34;test-group\u0026#34; + tags = { + \u0026#34;BusinessUnit\u0026#34; = \u0026#34;Test\u0026#34; } } Plan: 1 to add, 0 to change, 0 to destroy. Changes to Outputs: + ResourceGrouplocation = \u0026#34;eastus\u0026#34; + ResourceGroupname = \u0026#34;test-group\u0026#34; ------------------------------------------------------------------------ This plan was saved to: .\\plan.tfplan To perform exactly these actions, run the following command to apply: terraform apply \u0026#34;.\\\\plan.tfplan\u0026#34; The final step is to run Terraform apply to execute the plan which was drawn in the previous step.\nPS D:\\Terraform\\blab\u0026gt; terraform apply \u0026#34;.\\\\plan.tfplan\u0026#34; azurerm_resource_group.Rname: Creating... azurerm_resource_group.Rname: Creation complete after 2s [id=/subscriptions/XXXXX/resourceGroups/test-group] Apply complete! Resources: 1 added, 0 changed, 0 destroyed. The state of your infrastructure has been saved to the path below. This state is required to modify and destroy your infrastructure, so keep it safe. To inspect the complete state use the `terraform show` command. State path: terraform.tfstate Outputs: ResourceGrouplocation = eastus ResourceGroupname = test-group Validate if your script has created the required resource group\nPS D:\\Terraform\\blab\u0026gt; Get-AzResourceGroup test* | select ResourceGroupName ResourceGroupName ----------------- test-group Now , lets explore the option to delete the resources created by terraform. Terraform uses state file to destroy all the resource\u0026rsquo;s in the current stack\nPS D:\\Terraform\\blab\u0026gt; ls Directory: D:\\Terraform\\blab Mode LastWriteTime Length Name ---- ------------- ------ ---- d---- 08-03-2021 15:06 .terraform -a--- 08-03-2021 14:54 1293 main.tf -a--- 15-03-2021 17:31 1330 plan.tfplan -a--- 15-03-2021 17:34 899 terraform.tfstate -a--- 15-03-2021 17:34 156 terraform.tfstate.backup -a--- 08-03-2021 15:05 42 terraform.tfvars PS D:\\Terraform\\blab\u0026gt; terraform destroy azurerm_resource_group.Rname: Refreshing state... [id=/subscriptions/XXXX/resourceGroups/test-group] An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: - destroy Terraform will perform the following actions: # azurerm_resource_group.Rname will be destroyed - resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;Rname\u0026#34; { - id = \u0026#34;/subscriptions/XXXX/resourceGroups/test-group\u0026#34; -\u0026gt; null - location = \u0026#34;eastus\u0026#34; -\u0026gt; null - name = \u0026#34;test-group\u0026#34; -\u0026gt; null - tags = { - \u0026#34;BusinessUnit\u0026#34; = \u0026#34;Test\u0026#34; } -\u0026gt; null } Plan: 0 to add, 0 to change, 1 to destroy. Changes to Outputs: - ResourceGrouplocation = \u0026#34;eastus\u0026#34; -\u0026gt; null - ResourceGroupname = \u0026#34;test-group\u0026#34; -\u0026gt; null Do you really want to destroy all resources? Terraform will destroy all your managed infrastructure, as shown above. There is no undo. Only \u0026#39;yes\u0026#39; will be accepted to confirm. Enter a value: yes azurerm_resource_group.Rname: Destroying... [id=/subscriptions/XXXX/resourceGroups/test-group] azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 10s elapsed]azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 20s elapsed]azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 30s elapsed]azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 40s elapsed]azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 50s elapsed]azurerm_resource_group.Rname: Destruction complete after 51s Destroy complete! Resources: 1 destroyed. PS D:\\Terraform\\blab\u0026gt; Get-AzResourceGroup test* | select ResourceGroupName PS D:\\Terraform\\blab\u0026gt; ",
    "ref": "/blog/terraform/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
