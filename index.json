[{
    "title": "Terraform ",
    "date": "",
    "description": "",
    "body": "Terraform Introduction Infrastructure as code, popularly known as IaC, is similar to DevOps, where source code would always generate the same result. Infrastructure as code evolved to solve the problem of environment drift in the release pipelines. Inconsistency among environments leads to issues during deployments. Without IaC, Administration and infrastructure maintenance involve manual processes that are hard to track and contributed to errors.\nThe most popular tools used for Iac are Azure ARM and Terraform. As the name suggests, Azure ARM is meant only for Azure Cloud infra; however, Terraform supports multiple cloud Infrastructure, VMware, and on-prem Infrastructure. Both the tools have their advantage and disadvantages. In both cases, administrators needs to spend some time to understand the syntax and nuances.\nTerraform is a preferred tool for IaC as most organizations use more than one cloud to host their resources. Some of the advantages of Terraform are\n Ease of understanding Multi-cloud support Code versioning Statefile of configuration Workspace to separate different stacks Inbuilt dependency calculation Parallel execution capability One-click deployments and decommissions  A typical Terraform code has the following components\n Variables Data Providers Resources Output  Let go through a simple example of creating a resource group. What do we need first? Before you start coding, you need a valid Azure subscription and credentials to create the required resources. You can use either PowerShell, azure shell, or visual studio editor. The cool feature of Terraform is, it doesn\u0026rsquo;t need administrators to install the software. You can directly start coding in the local system or the Azure shell. In this post, I am using the visual studio editor.\nUnder the variable section, define the Resource Group Name and location. {} indicate the actual value of the variables are in the VAR file. The point to remember here is the file name needs to be terraform.tfvars\n############################################################################# # VARIABLES ############################################################################# variable \u0026#34;RGname\u0026#34; {} variable \u0026#34;location\u0026#34; {} Example of Var File\nRGname = \u0026#34;test-group\u0026#34; location = \u0026#34;eastus\u0026#34; Provider is nothing but the plugin the Terraform needs to import before executing the code; in our case, it’s Azure. ~\u0026gt; indicated the azurerm version needs to be greater than 1.0\n############################################################################# # PROVIDERS ############################################################################# #Import Azure provider/plugin  provider “azurerm” { version = “~\u0026gt; 1.0.” } Resources is the section you would create the actual resource . Here we are stating the resource type is “azurerm_resource_group,” and Rname refers to this resource in the code. What do you need for a resource group? Its name and the location. Name we are referring to RGname, which is of type Variable. Lets say your company has a mandatory rule to have all the resource names in lower case , this is where you use inbuilt terraform funtions . the code would look like – “name = lower(var.RGname)”\n############################################################################# # RESOURCES ############################################################################# resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;Rname\u0026#34; { name = var.RGname location = var.location tags = { \u0026#34;BusinessUnit\u0026#34; = \u0026#34;Test\u0026#34; } } Output : this is where you display the resource group name and location\n############################################################################# # OUTPUTS ############################################################################# output \u0026#34;ResourceGroupname\u0026#34; { value = azurerm_resource_group.Rname.name } output \u0026#34;ResourceGrouplocation\u0026#34; { value = azurerm_resource_group.Rname.location } How to run your first azure terraform code\n Create a folder “Terraform.” Navigate to the newly created folder “blab” Save the code as main.tf Save your variable file as terraform.tfvar  First step to execute your code is - Run terraform init , which will load the plugins defined under providers section of the code\nPS D:\\Terraform\\blab\u0026gt; terraform init Initializing the backend... Initializing provider plugins... - Using previously-installed hashicorp/azurerm v1.44.0 Terraform has been successfully initialized! You may now begin working with Terraform. Try running \u0026#34;terraform plan\u0026#34; to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. PS D:\\Terraform\\blab\u0026gt; The next step is to run Terraform plan, which will draw out an execution plan. Terraform performs a refresh, and then determines what actions are necessary to achieve the desired state specified in the configuration files. This step will not modify or create any resources.\nPS D:\\Terraform\\blab\u0026gt; terraform plan -out .\\plan.tfplan Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_resource_group.Rname will be created + resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;Rname\u0026#34; { + id = (known after apply) + location = \u0026#34;eastus\u0026#34; + name = \u0026#34;test-group\u0026#34; + tags = { + \u0026#34;BusinessUnit\u0026#34; = \u0026#34;Test\u0026#34; } } Plan: 1 to add, 0 to change, 0 to destroy. Changes to Outputs: + ResourceGrouplocation = \u0026#34;eastus\u0026#34; + ResourceGroupname = \u0026#34;test-group\u0026#34; ------------------------------------------------------------------------ This plan was saved to: .\\plan.tfplan To perform exactly these actions, run the following command to apply: terraform apply \u0026#34;.\\\\plan.tfplan\u0026#34; The final step is to run Terraform apply to execute the plan which was drawn in the previous step.\nPS D:\\Terraform\\blab\u0026gt; terraform apply \u0026#34;.\\\\plan.tfplan\u0026#34; azurerm_resource_group.Rname: Creating... azurerm_resource_group.Rname: Creation complete after 2s [id=/subscriptions/XXXXX/resourceGroups/test-group] Apply complete! Resources: 1 added, 0 changed, 0 destroyed. The state of your infrastructure has been saved to the path below. This state is required to modify and destroy your infrastructure, so keep it safe. To inspect the complete state use the `terraform show` command. State path: terraform.tfstate Outputs: ResourceGrouplocation = eastus ResourceGroupname = test-group Validate if your script has created the required resource group\nPS D:\\Terraform\\blab\u0026gt; Get-AzResourceGroup test* | select ResourceGroupName ResourceGroupName ----------------- test-group Now , lets explore the option to delete the resources created by terraform. Terraform uses state file to destroy all the resource\u0026rsquo;s in the current stack\nPS D:\\Terraform\\blab\u0026gt; ls Directory: D:\\Terraform\\blab Mode LastWriteTime Length Name ---- ------------- ------ ---- d---- 08-03-2021 15:06 .terraform -a--- 08-03-2021 14:54 1293 main.tf -a--- 15-03-2021 17:31 1330 plan.tfplan -a--- 15-03-2021 17:34 899 terraform.tfstate -a--- 15-03-2021 17:34 156 terraform.tfstate.backup -a--- 08-03-2021 15:05 42 terraform.tfvars PS D:\\Terraform\\blab\u0026gt; terraform destroy azurerm_resource_group.Rname: Refreshing state... [id=/subscriptions/XXXX/resourceGroups/test-group] An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: - destroy Terraform will perform the following actions: # azurerm_resource_group.Rname will be destroyed - resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;Rname\u0026#34; { - id = \u0026#34;/subscriptions/XXXX/resourceGroups/test-group\u0026#34; -\u0026gt; null - location = \u0026#34;eastus\u0026#34; -\u0026gt; null - name = \u0026#34;test-group\u0026#34; -\u0026gt; null - tags = { - \u0026#34;BusinessUnit\u0026#34; = \u0026#34;Test\u0026#34; } -\u0026gt; null } Plan: 0 to add, 0 to change, 1 to destroy. Changes to Outputs: - ResourceGrouplocation = \u0026#34;eastus\u0026#34; -\u0026gt; null - ResourceGroupname = \u0026#34;test-group\u0026#34; -\u0026gt; null Do you really want to destroy all resources? Terraform will destroy all your managed infrastructure, as shown above. There is no undo. Only \u0026#39;yes\u0026#39; will be accepted to confirm. Enter a value: yes azurerm_resource_group.Rname: Destroying... [id=/subscriptions/XXXX/resourceGroups/test-group] azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 10s elapsed]azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 20s elapsed]azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 30s elapsed]azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 40s elapsed]azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 50s elapsed]azurerm_resource_group.Rname: Destruction complete after 51s Destroy complete! Resources: 1 destroyed. PS D:\\Terraform\\blab\u0026gt; Get-AzResourceGroup test* | select ResourceGroupName PS D:\\Terraform\\blab\u0026gt; ",
    "ref": "/blog/terraform/"
  },{
    "title": "Markdown Syntax Guide",
    "date": "",
    "description": "Sample article showcasing basic Markdown syntax and formatting for HTML elements.",
    "body": "This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ",
    "ref": "/blog/markdown-syntax/"
  },{
    "title": "Rich Content",
    "date": "",
    "description": "A brief description of Hugo Shortcodes",
    "body": "Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n */}}\r--\r YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ",
    "ref": "/blog/rich-content/"
  },{
    "title": "Placeholder Text",
    "date": "",
    "description": "Lorem Ipsum Dolor Si Amet",
    "body": "Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n",
    "ref": "/blog/placeholder-text/"
  },{
    "title": "Emoji Support",
    "date": "",
    "description": "Guide to emoji usage in Hugo",
    "body": "Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }",
    "ref": "/blog/emoji-support/"
  },{
    "title": "About",
    "date": "",
    "description": "Hugo, the world’s fastest framework for building websites",
    "body": "Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n",
    "ref": "/about/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
