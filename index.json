[{
    "title": "Terraform ",
    "date": "",
    "description": "Terraform Introduction",
    "body": "Terraform Introduction Infrastructure as code, popularly known as IaC, is similar to DevOps, where source code would always generate the same result. Infrastructure as code evolved to solve the problem of environment drift in the release pipelines. Inconsistency among environments leads to issues during deployments. Without IaC, Administration and infrastructure maintenance involve manual processes that are hard to track and contributed to errors.\nThe most popular tools used for Iac are Azure ARM and Terraform. As the name suggests, Azure ARM is meant only for Azure Cloud infra; however, Terraform supports multiple cloud Infrastructure, VMware, and on-prem Infrastructure. Both the tools have their advantage and disadvantages. In both cases, administrators needs to spend some time to understand the syntax and nuances.\nTerraform is a preferred tool for IaC as most organizations use more than one cloud to host their resources. Some of the advantages of Terraform are\n Ease of understanding Multi-cloud support Code versioning Statefile of configuration Workspace to separate different stacks Inbuilt dependency calculation Parallel execution capability One-click deployments and decommissions  A typical Terraform code has the following components\n Variables Data Providers Resources Output  Let go through a simple example of creating a resource group. What do we need first? Before you start coding, you need a valid Azure subscription and credentials to create the required resources. You can use either PowerShell, azure shell, or visual studio editor. The cool feature of Terraform is, it doesn\u0026rsquo;t need administrators to install the software. You can directly start coding in the local system or the Azure shell. In this post, I am using the visual studio editor.\nUnder the variable section, define the Resource Group Name and location. {} indicate the actual value of the variables are in the VAR file. The point to remember here is the file name needs to be terraform.tfvars\n############################################################################# # VARIABLES ############################################################################# variable \u0026#34;RGname\u0026#34; {} variable \u0026#34;location\u0026#34; {} Example of Var File\nRGname = \u0026#34;test-group\u0026#34; location = \u0026#34;eastus\u0026#34; Provider is nothing but the plugin the Terraform needs to import before executing the code; in our case, it’s Azure. ~\u0026gt; indicated the azurerm version needs to be greater than 1.0\n############################################################################# # PROVIDERS ############################################################################# #Import Azure provider/plugin  provider “azurerm” { version = “~\u0026gt; 1.0.” } Resources is the section you would create the actual resource . Here we are stating the resource type is “azurerm_resource_group,” and Rname refers to this resource in the code. What do you need for a resource group? Its name and the location. Name we are referring to RGname, which is of type Variable. Lets say your company has a mandatory rule to have all the resource names in lower case , this is where you use inbuilt terraform funtions . the code would look like – “name = lower(var.RGname)”\n############################################################################# # RESOURCES ############################################################################# resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;Rname\u0026#34; { name = var.RGname location = var.location tags = { \u0026#34;BusinessUnit\u0026#34; = \u0026#34;Test\u0026#34; } } Output : this is where you display the resource group name and location\n############################################################################# # OUTPUTS ############################################################################# output \u0026#34;ResourceGroupname\u0026#34; { value = azurerm_resource_group.Rname.name } output \u0026#34;ResourceGrouplocation\u0026#34; { value = azurerm_resource_group.Rname.location } How to run your first azure terraform code\n Create a folder “Terraform.” Navigate to the newly created folder “blab” Save the code as main.tf Save your variable file as terraform.tfvar  First step to execute your code is - Run terraform init , which will load the plugins defined under providers section of the code\nPS D:\\Terraform\\blab\u0026gt; terraform init Initializing the backend... Initializing provider plugins... - Using previously-installed hashicorp/azurerm v1.44.0 Terraform has been successfully initialized! You may now begin working with Terraform. Try running \u0026#34;terraform plan\u0026#34; to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. PS D:\\Terraform\\blab\u0026gt; The next step is to run Terraform plan, which will draw out an execution plan. Terraform performs a refresh, and then determines what actions are necessary to achieve the desired state specified in the configuration files. This step will not modify or create any resources.\nPS D:\\Terraform\\blab\u0026gt; terraform plan -out .\\plan.tfplan Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # azurerm_resource_group.Rname will be created + resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;Rname\u0026#34; { + id = (known after apply) + location = \u0026#34;eastus\u0026#34; + name = \u0026#34;test-group\u0026#34; + tags = { + \u0026#34;BusinessUnit\u0026#34; = \u0026#34;Test\u0026#34; } } Plan: 1 to add, 0 to change, 0 to destroy. Changes to Outputs: + ResourceGrouplocation = \u0026#34;eastus\u0026#34; + ResourceGroupname = \u0026#34;test-group\u0026#34; ------------------------------------------------------------------------ This plan was saved to: .\\plan.tfplan To perform exactly these actions, run the following command to apply: terraform apply \u0026#34;.\\\\plan.tfplan\u0026#34; The final step is to run Terraform apply to execute the plan which was drawn in the previous step.\nPS D:\\Terraform\\blab\u0026gt; terraform apply \u0026#34;.\\\\plan.tfplan\u0026#34; azurerm_resource_group.Rname: Creating... azurerm_resource_group.Rname: Creation complete after 2s [id=/subscriptions/XXXXX/resourceGroups/test-group] Apply complete! Resources: 1 added, 0 changed, 0 destroyed. The state of your infrastructure has been saved to the path below. This state is required to modify and destroy your infrastructure, so keep it safe. To inspect the complete state use the `terraform show` command. State path: terraform.tfstate Outputs: ResourceGrouplocation = eastus ResourceGroupname = test-group Validate if your script has created the required resource group\nPS D:\\Terraform\\blab\u0026gt; Get-AzResourceGroup test* | select ResourceGroupName ResourceGroupName ----------------- test-group Now , lets explore the option to delete the resources created by terraform. Terraform uses state file to destroy all the resource\u0026rsquo;s in the current stack\nPS D:\\Terraform\\blab\u0026gt; ls Directory: D:\\Terraform\\blab Mode LastWriteTime Length Name ---- ------------- ------ ---- d---- 08-03-2021 15:06 .terraform -a--- 08-03-2021 14:54 1293 main.tf -a--- 15-03-2021 17:31 1330 plan.tfplan -a--- 15-03-2021 17:34 899 terraform.tfstate -a--- 15-03-2021 17:34 156 terraform.tfstate.backup -a--- 08-03-2021 15:05 42 terraform.tfvars PS D:\\Terraform\\blab\u0026gt; terraform destroy azurerm_resource_group.Rname: Refreshing state... [id=/subscriptions/XXXX/resourceGroups/test-group] An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: - destroy Terraform will perform the following actions: # azurerm_resource_group.Rname will be destroyed - resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;Rname\u0026#34; { - id = \u0026#34;/subscriptions/XXXX/resourceGroups/test-group\u0026#34; -\u0026gt; null - location = \u0026#34;eastus\u0026#34; -\u0026gt; null - name = \u0026#34;test-group\u0026#34; -\u0026gt; null - tags = { - \u0026#34;BusinessUnit\u0026#34; = \u0026#34;Test\u0026#34; } -\u0026gt; null } Plan: 0 to add, 0 to change, 1 to destroy. Changes to Outputs: - ResourceGrouplocation = \u0026#34;eastus\u0026#34; -\u0026gt; null - ResourceGroupname = \u0026#34;test-group\u0026#34; -\u0026gt; null Do you really want to destroy all resources? Terraform will destroy all your managed infrastructure, as shown above. There is no undo. Only \u0026#39;yes\u0026#39; will be accepted to confirm. Enter a value: yes azurerm_resource_group.Rname: Destroying... [id=/subscriptions/XXXX/resourceGroups/test-group] azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 10s elapsed]azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 20s elapsed]azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 30s elapsed]azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 40s elapsed]azurerm_resource_group.Rname: Still destroying... [id=/subscriptions/XXXX/resourceGroups/test-group, 50s elapsed]azurerm_resource_group.Rname: Destruction complete after 51s Destroy complete! Resources: 1 destroyed. PS D:\\Terraform\\blab\u0026gt; Get-AzResourceGroup test* | select ResourceGroupName PS D:\\Terraform\\blab\u0026gt; ",
    "ref": "/blog/terraform01/"
  },{
    "title": "Rich Content",
    "date": "",
    "description": "A brief description of Hugo Shortcodes",
    "body": "Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n */}}\r--\r YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ",
    "ref": "/blog/rich-content/"
  },{
    "title": "About Me",
    "date": "",
    "description": "Dependable and goal-oriented IT infrastructure engineer with 12 years of experience in designing and delivering infrastructure projects",
    "body": "I am Shashi, I have been an IT Infrastructure engineer since 2008. I have worked predominately on virtualization, as the blog name indicates. I had an opportunity to work on multiple virtualization technologies, including VMware virtualization, Hyper V, Azure Cloud. When it comes to security products, I have good knowledge about Symantec endpoint protection and Gemalto encryption.\n Microsoft Certified: Azure Solutions Architect Expert Exam AZ-303: Microsoft Azure Architect Technologies Exam 742: Identity with Windows Server 2016 VMware Certified Professional- Data Center Virtualization  What you can expect from this blog ? anything around technologies used in Infrastructure, both on-prem and the cloud.\n",
    "ref": "/about/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
